# FindersKeepers v2 Redis Configuration
# Optimized for knowledge base caching and session management

# === MEMORY MANAGEMENT ===
maxmemory 512mb
maxmemory-policy allkeys-lru
maxmemory-samples 5

# === PERSISTENCE FOR CACHE ===
# AOF for session data persistence
appendonly yes
appendfsync everysec
no-appendfsync-on-rewrite yes
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb

# RDB snapshots for backup
save 900 1
save 300 10  
save 60 10000

# === PERFORMANCE OPTIMIZATION ===
# Optimize databases for AI workloads
databases 5

# Optimize background tasks for caching
hz 10
timeout 300
tcp-keepalive 60

# === NETWORK OPTIMIZATION ===
tcp-backlog 511
bind 0.0.0.0
port 6379
protected-mode no

# === CACHE-SPECIFIC TUNING ===
# Optimize data structures for cache
hash-max-listpack-entries 512
hash-max-listpack-value 64
list-max-listpack-size -2
set-max-listpack-entries 128
set-max-listpack-value 64
zset-max-listpack-entries 128
zset-max-listpack-value 64

# === LOGGING & MONITORING ===
loglevel notice
logfile ""
syslog-enabled no

# Slowlog for cache performance monitoring
slowlog-log-slower-than 10000
slowlog-max-len 128

# === SECURITY ===
# Disable dangerous commands in production
# rename-command FLUSHDB ""
# rename-command FLUSHALL ""
# rename-command DEBUG ""

# === CLIENT MANAGEMENT ===
maxclients 1000
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit replica 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60

# === ADVANCED FEATURES ===
# Enable key expiration
activerehashing yes
active-expire-effort 1

# Lazy freeing for better performance
lazyfree-lazy-eviction yes
lazyfree-lazy-expire yes
lazyfree-lazy-server-del yes

# === 2025 AI/ML WORKLOAD OPTIMIZATION ===
# Optimized for vector caching and semantic similarity
# (Using standard Redis with application-level vector operations)

# Increase hash table sizes for vector data structures
hash-max-listpack-entries 1024
hash-max-listpack-value 1024

# Optimize for large key operations (embeddings)
client-output-buffer-limit normal 512mb 256mb 60

# === SEMANTIC CACHING PREPARATION ===
# Configure for efficient LLM response caching
# Application-level semantic caching with vector similarity

# === FINDERSKEEPERS SPECIFIC ===
# Enhanced database allocation for AI workloads:
# DB 0: Vector search cache (embeddings, similarity searches)
# DB 1: Semantic cache (LLM responses with vector keys)
# DB 2: Session state management 
# DB 3: Statistics & analytics cache
# DB 4: Rate limiting & API usage
databases 5