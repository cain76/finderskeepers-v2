{
  "name": "FK2 - Auto Entity Extraction",
  "nodes": [
    {
      "parameters": {
        "triggerMode": "listenTrigger",
        "channelName": "new_document_added",
        "options": {}
      },
      "id": "postgres-trigger",
      "name": "New Document Trigger",
      "type": "n8n-nodes-base.postgresTrigger",
      "typeVersion": 1,
      "position": [
        256,
        304
      ],
      "credentials": {
        "postgres": {
          "id": "dPoETNV5RR7r8Rng",
          "name": "Postgres account 5"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse PostgreSQL notification payload\ntry {\n  const input = $input.first().json;\n  \n  // Extract document data from the payload\n  let documentData;\n  if (input.payload && typeof input.payload === 'object') {\n    // Already parsed object from PostgreSQL notification\n    documentData = input.payload;\n  } else if (typeof input === 'string') {\n    // If it's a string, parse it\n    documentData = JSON.parse(input);\n  } else {\n    // Direct object\n    documentData = input;\n  }\n  \n  // Extract document information\n  const documentId = documentData.id;\n  const title = documentData.title || 'Untitled';\n  const project = documentData.project || 'finderskeepers-v2';\n  const docType = documentData.doc_type || 'general';\n  const contentLength = documentData.content_length || 0;\n  \n  console.log('Parsed document:', { documentId, title, project });\n  \n  return [{\n    json: {\n      document_id: documentId,\n      title: title,\n      project: project,\n      doc_type: docType,\n      content_length: contentLength,\n      timestamp: new Date().toISOString(),\n      fk2_entity_extraction: true\n    }\n  }];\n} catch (error) {\n  console.error('Error parsing notification:', error);\n  return [{\n    json: {\n      error: true,\n      message: error.message,\n      original_payload: $input.first().json\n    }\n  }];\n}"
      },
      "id": "parse-notification",
      "name": "Parse Document Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        464,
        304
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://fk2_fastapi:80/api/entities/extract",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({ document_id: $json.document_id, force_reprocess: false }) }}",
        "options": {
          "response": {
            "response": {}
          },
          "timeout": 60000
        }
      },
      "id": "call-entity-api",
      "name": "Extract Entities via API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        656,
        304
      ],
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetweenTries": 5000,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "success_check",
              "leftValue": "={{ $json.status }}",
              "rightValue": "success",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "check-result",
      "name": "Check Extraction Result",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        864,
        304
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO system_logs (event_type, event_data, created_at) VALUES ($1, $2::jsonb, NOW()) RETURNING id",
        "options": {
          "connectionTimeout": 15,
          "delayClosingIdleConnection": 30,
          "queryBatching": "independently",
          "queryReplacement": "entity_extraction_success,{{ JSON.stringify({ document_id: $('Parse Document Data').item.json.document_id, title: $('Parse Document Data').item.json.title, entities_extracted: $json.entities_extracted, relationships_created: $json.relationships_created, project: $('Parse Document Data').item.json.project }) }}"
        }
      },
      "id": "log-success",
      "name": "Log Success",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1056,
        208
      ],
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetweenTries": 1000,
      "credentials": {
        "postgres": {
          "id": "wR5JZbsMY0zlgGvP",
          "name": "Postgres account 6"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO system_logs (event_type, event_data, created_at) VALUES ($1, $2::jsonb, NOW()) RETURNING id",
        "options": {
          "connectionTimeout": 15,
          "delayClosingIdleConnection": 30,
          "queryBatching": "independently",
          "queryReplacement": "entity_extraction_error,{{ JSON.stringify({ document_id: $('Parse Document Data').item.json.document_id, title: $('Parse Document Data').item.json.title, error: $json.message || 'Unknown error', project: $('Parse Document Data').item.json.project }) }}"
        }
      },
      "id": "log-error",
      "name": "Log Error",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1056,
        400
      ],
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetweenTries": 1000,
      "credentials": {
        "postgres": {
          "id": "n8435j7eC8mDlBfj",
          "name": "Postgres account 7"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://fk2_fastapi:80/api/diary/webhook",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"event\": \"entity_extraction_complete\",\n  \"document_id\": \"{{ $('Parse Document Data').item.json.document_id }}\",\n  \"success\": {{ $('Check Extraction Result').item.json.success_check }},\n  \"entities_extracted\": {{ $json.entities_extracted || 0 }},\n  \"relationships_created\": {{ $json.relationships_created || 0 }},\n  \"project\": \"{{ $('Parse Document Data').item.json.project }}\"\n}",
        "options": {
          "timeout": 10000
        }
      },
      "id": "notify-webhook",
      "name": "Notify Completion",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1264,
        304
      ],
      "onError": "continueRegularOutput"
    }
  ],
  "pinData": {},
  "connections": {
    "New Document Trigger": {
      "main": [
        [
          {
            "node": "Parse Document Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Document Data": {
      "main": [
        [
          {
            "node": "Extract Entities via API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Entities via API": {
      "main": [
        [
          {
            "node": "Check Extraction Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Extraction Result": {
      "main": [
        [
          {
            "node": "Log Success",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Success": {
      "main": [
        [
          {
            "node": "Notify Completion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Error": {
      "main": [
        [
          {
            "node": "Notify Completion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all",
    "saveManualExecutions": true,
    "saveExecutionProgress": true
  },
  "versionId": "667a4e94-2811-4a7a-afe1-32a0738abbf6",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ac7d68b15823444389f1bad875ce608a91b830b9ddf7d7536c6dbf672c9a4af4"
  },
  "id": "UXT7hd0Yh7iNrazd",
  "tags": []
}