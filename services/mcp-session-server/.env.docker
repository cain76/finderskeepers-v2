# FindersKeepers-v2 Enhanced MCP Server - Docker Integration Configuration
# Connects to EXISTING Docker containers (fk2_postgres, fk2_redis, fk2_qdrant, etc.)
# DO NOT recreate containers - they're already running!

# ========================================
# DOCKER NETWORK INTEGRATION
# ========================================
# Connect to existing finderskeepers-v2 Docker network
DOCKER_NETWORK=finderskeepers-v2

# ========================================
# DATABASE CONNECTION (fk2_postgres container)
# ========================================
DB_HOST=fk2_postgres
DB_PORT=5432
DB_NAME=finderskeepers_v2
DB_USER=finderskeepers
DB_PASSWORD=fk2025secure

# Database Connection Pool Settings (optimized for existing container)
DB_POOL_MIN_SIZE=5
DB_POOL_MAX_SIZE=20
DB_COMMAND_TIMEOUT=60

# ========================================
# REDIS CACHE CONNECTION (fk2_redis container)  
# ========================================
REDIS_HOST=fk2_redis
REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_DB=0

# Cache TTL in seconds (default: 1 hour)
CACHE_TTL=3600

# ========================================
# QDRANT VECTOR SEARCH (fk2_qdrant container)
# ========================================
QDRANT_HOST=fk2_qdrant
QDRANT_PORT=6333

# Vector embedding settings
VECTOR_DIMENSION=384
EMBEDDING_MODEL=all-MiniLM-L6-v2
VECTOR_COLLECTION_NAME=finderskeepers_conversations

# ========================================
# N8N INTEGRATION (fk2_n8n container)
# ========================================
N8N_BASE_URL=http://fk2_n8n:5678
N8N_WEBHOOK_SESSION=http://fk2_n8n:5678/webhook/agent-logger
N8N_WEBHOOK_ACTION=http://fk2_n8n:5678/webhook/agent-action-tracker

# Use existing n8n credentials from main .env
N8N_JWT_SECRET=${N8N_JWT_SECRET}
N8N_API_KEY=${N8N_API_KEY}

# ========================================
# MCP SERVER CONFIGURATION
# ========================================
SERVER_NAME=FindersKeepers-v2-Enhanced-Docker
LOG_LEVEL=INFO
ENVIRONMENT=production

# Platform-specific settings for bitcain.net
PLATFORM=bitcain.net
DEFAULT_USER_ID=bitcain
DEFAULT_PROJECT=finderskeepers-v2
GPU_ACCELERATION=true

# ========================================
# DOCKER CONTAINER SETTINGS
# ========================================
# Container name for MCP server
MCP_CONTAINER_NAME=fk2_mcp_session_server

# Network settings
CONTAINER_NETWORK=finderskeepers-v2
CONTAINER_RESTART_POLICY=unless-stopped

# Resource limits (adjust based on system capacity)
CONTAINER_MEMORY_LIMIT=2g
CONTAINER_CPU_LIMIT=1.0

# ========================================
# PERFORMANCE TUNING (Docker Environment)
# ========================================
# Optimized for container networking
CONNECTION_TIMEOUT=30
HTTP_TIMEOUT=30
RETRY_ATTEMPTS=3
RETRY_DELAY=1

# Batch processing settings
EMBEDDING_BATCH_SIZE=50
MAX_CACHED_MESSAGES=100
MAX_RESUME_MESSAGES=50

# ========================================
# MONITORING AND HEALTH CHECKS
# ========================================
# Health check endpoints for existing containers
POSTGRES_HEALTH_CHECK=postgresql://finderskeepers:fk2025secure@fk2_postgres:5432/finderskeepers_v2
REDIS_HEALTH_CHECK=redis://fk2_redis:6379/0
QDRANT_HEALTH_CHECK=http://fk2_qdrant:6333/health
N8N_HEALTH_CHECK=http://fk2_n8n:5678/healthz

# Health check intervals
HEALTH_CHECK_INTERVAL=60
HEALTH_CHECK_TIMEOUT=10
HEALTH_CHECK_RETRIES=3

# ========================================
# LOGGING CONFIGURATION
# ========================================
# Structured logging for Docker environment
STRUCTURED_LOGGING=true
LOG_FORMAT=json
LOG_TIMESTAMP=true

# Docker log driver compatibility
LOG_TO_STDOUT=true
LOG_TO_STDERR=false

# Log levels by component
DATABASE_LOG_LEVEL=INFO
CACHE_LOG_LEVEL=INFO
VECTOR_LOG_LEVEL=INFO
MCP_LOG_LEVEL=INFO

# ========================================
# SECURITY SETTINGS (Docker Network)
# ========================================
# Internal container communication only
BIND_ADDRESS=0.0.0.0
BIND_PORT=8000

# Container security
USER_ID=1000
GROUP_ID=1000
READ_ONLY_ROOT_FILESYSTEM=false

# ========================================
# INTEGRATION TEST ENDPOINTS
# ========================================
# Use these for testing connectivity to existing containers
TEST_POSTGRES_QUERY=SELECT version()
TEST_REDIS_COMMAND=PING
TEST_QDRANT_ENDPOINT=/collections
TEST_N8N_ENDPOINT=/api/v1/workflows

# ========================================
# BACKUP AND PERSISTENCE
# ========================================
# Leverage existing volume mounts from main containers
POSTGRES_VOLUME_MOUNT=/var/lib/postgresql/data
REDIS_VOLUME_MOUNT=/data
QDRANT_VOLUME_MOUNT=/qdrant/storage

# Backup configuration (works with existing setup)
BACKUP_ENABLED=true
BACKUP_SCHEDULE="0 2 * * *"
BACKUP_RETENTION_DAYS=30
BACKUP_DESTINATION=/media/cain/linux_storage/backups/finderskeepers-v2

# ========================================
# DEVELOPMENT AND DEBUGGING (bitcain.net)
# ========================================
# Debug mode settings
DEBUG_MODE=false
VERBOSE_LOGGING=false
PROFILING_ENABLED=false

# Development overrides
DEV_SKIP_HEALTH_CHECKS=false
DEV_USE_LOCAL_FILES=false
DEV_MOCK_EXTERNAL_SERVICES=false

# ========================================
# CLAUDE DESKTOP INTEGRATION
# ========================================
# MCP server access from host system
MCP_HOST_PORT=8001
MCP_PROTOCOL=stdio
MCP_TRANSPORT=unix_socket

# Claude Desktop connection path
CLAUDE_SOCKET_PATH=/tmp/finderskeepers-mcp.sock
CLAUDE_CONFIG_PATH=/home/cain/.claude/mcp.json

# ========================================
# GPU ACCELERATION (RTX 2080ti)
# ========================================
# CUDA settings for Docker container
NVIDIA_VISIBLE_DEVICES=all
NVIDIA_DRIVER_CAPABILITIES=compute,utility
CUDA_VISIBLE_DEVICES=0

# GPU memory management
GPU_MEMORY_FRACTION=0.7
CUDA_CACHE_DISABLE=0

# Vector operations on GPU
USE_GPU_VECTORS=true
FAISS_GPU_ENABLED=true
TORCH_CUDA_ENABLED=true

# ========================================
# CONTAINER HEALTH AND MONITORING
# ========================================
# Metrics collection for existing infrastructure
COLLECT_METRICS=true
METRICS_INTERVAL=30
METRICS_RETENTION_HOURS=24

# Integration with existing monitoring
PROMETHEUS_ENABLED=false
GRAFANA_ENABLED=false
CUSTOM_METRICS_ENDPOINT=/metrics

# ========================================
# ENVIRONMENT VALIDATION
# ========================================
# Verify connection to existing containers on startup
VALIDATE_POSTGRES_CONNECTION=true
VALIDATE_REDIS_CONNECTION=true
VALIDATE_QDRANT_CONNECTION=true
VALIDATE_N8N_CONNECTION=true

# Startup dependencies
WAIT_FOR_POSTGRES=30
WAIT_FOR_REDIS=10
WAIT_FOR_QDRANT=20
WAIT_FOR_N8N=15

# ========================================
# PRODUCTION DEPLOYMENT SETTINGS
# ========================================
# Production-ready configuration
PRODUCTION_MODE=true
ENABLE_CORS=false
ENABLE_RATE_LIMITING=true
RATE_LIMIT_PER_MINUTE=1000

# Resource monitoring
MONITOR_MEMORY_USAGE=true
MONITOR_CPU_USAGE=true
MONITOR_DISK_USAGE=true
MEMORY_THRESHOLD_PERCENT=85
CPU_THRESHOLD_PERCENT=80

# Graceful shutdown
SHUTDOWN_TIMEOUT=30
GRACEFUL_SHUTDOWN=true
CLEANUP_ON_EXIT=true
